@page "/"
@using ChibiCSharp
@using System.Net
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>
<div>
    <div class="container-fluid">
        <h4>ChibiC# - C#によるC#コンパイラ</h4>
        <button @onclick="OnClickSample">サンプルコード</button> @Explanation (@(Count == -1 ? "-" : Count + 1) / @SampleCode.Length)
        <div class="row py-2" style="height:60vh;">
            <div class="col">
                <textarea @bind=@Code @oninput="OnInputChange" placeholder="ココにコードを書くかサンプルコードを押してください"></textarea>
            </div>
            <div class="col">
                <textarea readonly class="assembly">
                    @(Assembly)
                </textarea>
            </div>
        </div>
        <button @onclick="OnClickRun">ilasm.exe → 実行(ExitCodeを表示)</button>
        <div class="py-2">
            <textarea readonly class="assembly">
                @(ExeResult)
            </textarea>
        </div>
    </div>
    <br />
    <div>
        <blockquote>inspired by <a href="https://www.sigbus.info/compilerbook">低レイヤを知りたい人のためのCコンパイラ作成入門</a></blockquote>
        <ul>
@*             <li><input type="checkbox" disabled> <s>ステップ18: ポインタ型を導入する</s></li>
            <li><input type="checkbox" checked> ステップ17: 暗黙の変数定義を廃止して、intというキーワードを導入する</li>
            <li><input type="checkbox" disabled> <s>ステップ16: 単項&と単項*</s></li>
 *@         
            <li><input type="checkbox" checked> ステップ15: 関数の定義に対応する</li>
            <li><input type="checkbox" checked> ステップ14: 関数の呼び出しに対応する</li>
            <li><input type="checkbox" checked disabled> ステップ13: ブロック</li>
            <li><input type="checkbox" checked disabled> ステップ12: 制御構文を足す</li>
            <li><input type="checkbox" checked disabled> ステップ11：return文</li>
            <li><input type="checkbox" checked disabled> ステップ10：複数文字のローカル変数</li>
            <li><input type="checkbox" checked disabled> ステップ9：1文字のローカル変数</li>
            <li><input type="checkbox" checked disabled> ステップ8: ファイル分割とMakefileの変更</li>
            <li><input type="checkbox" checked disabled> ステップ7: 比較演算子</li>
            <li><input type="checkbox" checked disabled> ステップ6：単項プラスと単項マイナス</li>
            <li><input type="checkbox" checked disabled> ステップ5：四則演算のできる言語の作成</li>
            <li><input type="checkbox" checked disabled> ステップ4：エラーメッセージを改良</li>
            <li><input type="checkbox" checked disabled> ステップ3：トークナイザを導入</li>
            <li><input type="checkbox" checked disabled> ステップ2：加減算のできるコンパイラの作成</li>
            <li><input type="checkbox" checked disabled> ステップ1：整数1個をコンパイルする言語の作成</li>
        </ul>
    </div>
</div>


@code {
    private string Code { get; set; } = "";
    private string Assembly = "";
    private string ExeResult = "";
    private string Explanation = "";

    private static readonly (string,string)[] SampleCode =
    {
        ("計算式", $"return (3+5)/2;"),
        ("比較演算子", $"return 0<=1;"),
        ("変数代入", $"a=3;{Environment.NewLine}z=5;{Environment.NewLine}return a+z;"),
        ("if文", $"if (1) return 2;{Environment.NewLine}return 3;"),
        ("while文", $"i=0;{Environment.NewLine}while(i<10) i=i+1;{Environment.NewLine}return i;"),
        ("for文", $"i=0;{Environment.NewLine}j=0;{Environment.NewLine}for (i=0; i<=10; i=i+1) j=i+j;{Environment.NewLine}return j;"),
    };
    private static int Count = -1;

    private void OnInputChange(ChangeEventArgs e)
    {
        Code = e.Value?.ToString() ?? "";
        Assembly = WebUtility.HtmlEncode(Compiler.Compile(Code));
    }

    private void OnClickSample()
    {
        Count = (Count + 1) % SampleCode.Length;
        Explanation = SampleCode[Count].Item1;
        Code = SampleCode[Count].Item2;
        Assembly = WebUtility.HtmlEncode(Compiler.Compile(Code));
    }

    private void OnClickRun()
    {
        ExeResult = Executer.Run(Assembly);
    }
}